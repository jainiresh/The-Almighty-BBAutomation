- **CSRF Testing**
    - Application has Anti-CSRF token implemented
        - [ ]  Removing the Anti-CSRF Token
        - [ ]  Altering the Anti-CSRF Token
        - [ ]  Using the Attackerâ€™s Anti-CSRF Token
        - [ ]  Spoofing the Anti-CSRF Token
        - [ ]  Using guessable Anti-CSRF Tokens
        - [ ]  Stealing Anti-CSRF Tokens
    - Application validates the Referrer or the Origin of the request received
        - [ ]  Restricting the CSRF POC from sending the Referrer header
        - [ ]  Bypass the whitelisting/blacklisting mechanism used by the application
    - Sending data in JSON/XML format
        - [ ]  By using normal HTML Form1
        - [ ]  By using normal HTML Form2 (By Fetch Request)
        - [ ]  By using XMLHTTP Request/AJAX request
        - [ ]  By using Flash file


- **CAPTCHA Testing**
    - [ ]  Missing Captcha Field Integrity Checks
    - [ ]  HTTP Verb Manipulation
    - [ ]  Content Type Conversion
    - [ ]  Reusuable Captcha
    - [ ]  Check if captcha is retrievable with the absolute path such as
    [www.tushar.com/internal/captcha/images/24.png](http://www.chintan.com/internal/captcha/images/24.png)
    - [ ]  Check for the server side validation for CAPTCHA.Remove captcha block from GUI using firebug addon and submit request to the server
    - [ ]  Check if image recognition can be done with OCR tool?
    
    - **Server-side request forgery (SSRF)**
    - Common injection parameters
        
        
    - [ ]  Try basic localhost payloads
    - Bypassing filters
        - [ ]  Bypass using HTTPS
        - [ ]  Bypass with [::]
        - [ ]  Bypass with a domain redirection
        - [ ]  Bypass using a decimal IP location
        - [ ]  Bypass using IPv6/IPv4 Address Embedding
        - [ ]  Bypass using malformed urls
        - [ ]  Bypass using rare address(short-hand IP addresses by dropping the zeros)
        - [ ]  Bypass using enclosed alphanumerics
    - Cloud Instances
       
            
    - [ ]  Bypassing via open redirection
